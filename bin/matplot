#!/usr/bin/env python

import pylab
import sys
import argparse
import datetime


COLOURS = 'rbcmykg'
STYLES = ('-', '--', '-.')


def get_colour(index):
    while index >= len(COLOURS):
        index -= len(COLOURS)
    return COLOURS[index]


def get_style(index):
    while index >= len(STYLES):
        index -= len(STYLES)
    return STYLES[index]


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("-F", "--field-separator", metavar = "STRING",
                        nargs = 1, default = "\t")

    parser.add_argument("-R", "--record-separator", metavar = "STRING",
                        nargs = 1, default = "\n")

    parser.add_argument("-o", "--origin", action = "store_true",
                        default = False)

    parser.add_argument("-m", "--markers", action = "store_true",
                        default = False)

    parser.add_argument("-l", "--label", metavar = ("AXIS", "LABEL"),
                        type = str, nargs = 2, action = "append", default = [])

    parser.add_argument("-g", "--log", metavar = "AXIS", type = str, nargs = 1,
                        action = "append", default = [])

    parser.add_argument("-t", "--timestamp", action = "store_true",
                        default = False)

    parser.add_argument("-d", "--headers", action = "store_true",
                        default = False)

    parser.add_argument("-a", "--tag-format", action = "store_true",
                        default = False)

    parser.add_argument("source", metavar = "FILE", nargs = "*",
                        default = ["-"])

    return parser.parse_args()


def readtable(stream, args):
    if args.headers:
        assert not args.tag_format

        while True:
            line = stream.readline()

            if not line.startswith("#"):
                break

        names = line.split(args.field_separator[0])[1:]

    data = map(
        lambda line: map(
            float,
            line.split(args.field_separator[0])
        ),
        filter(
            lambda line: len(line) > 0 and not line.startswith("#"),
            stream.read().split(args.record_separator[0])
        )
    )

    # Munge data into form required by pylab
    series = map(
        lambda column: map(lambda line: (line[0], line[column]), data),
        range(1, len(data[0]))
    )

    if args.headers:
        return dict((names[i], series[i]) for i in range(len(series)))

    else:
        return dict((None, series[i]) for i in range(len(series)))


def readtag(stream, args):
    series = {}

    for line in stream.read().split(args.record_separator[0]):
        if line.startswith("#") or len(line) == 0:
            continue

        parts = line.split(args.field_separator[0])

        series.setdefault(parts[0], []).append((float(parts[1]),
                                                float(parts[2])))

    return series


def plot_file(args, filename):
    if filename == "-":
        stream = sys.stdin
    else:
        stream = open(filename)

    # Load all the data
    if args.tag_format:
        series = readtag(stream, args)

    else:
        series = readtable(stream, args)

    if args.timestamp:
        pylab.xticks(rotation=90)

    if args.markers:
        fmt = 'x'
    else:
        fmt = ''

    for i, item in enumerate(series.iteritems()):
        if args.timestamp:
            x = [datetime.datetime.fromtimestamp(v[0]) for v in item[1]]

        else:
            x = [v[0] for v in item[1]]

        y = [v[1] for v in item[1]]

        pylab.plot(x, y, fmt, color=get_colour(i), label=item[0],
                   linestyle=get_style(i))

    stream.close()


def main():
    args = parse_args()

    fig = pylab.figure()

    for arg in args.source:
        plot_file(args, arg)

    # Apply formatting for whole graph
    if args.origin:
        pylab.xlim(xmin = 0)
        pylab.ylim(ymin = 0)

    for arg in args.label:
        axis = arg[0].lower()
        getattr(pylab, "%slabel" % axis)(arg[1])

    for arg in args.log:
        axis = arg[0].lower()
        getattr(pylab, "%sscale" % axis)("log")

    if args.headers:
        pylab.legend()

    pylab.show()


if __name__ == "__main__":
    main()
